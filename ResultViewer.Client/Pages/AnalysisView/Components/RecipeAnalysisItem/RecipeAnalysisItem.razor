﻿@using ResultViewer.Client.Core.Constants;
@using ResultViewer.Client.Core.Entities.Local;

<div class="recipe-analysis-item-container @(IsAnyPropertyOutOfRange(item) ? "" : "")">
    <div class="rv-flex-h-stack rv-flex-justify-space-around">
        <div class="rv-flex-12 item-text" data-hover="@item.RunDate.ToString(Constants.LotItemComponent.ToTimeFormat)">@item.RunDate.ToString(Constants.LotItemComponent.ToTimeFormat)</div>
        <div class="rv-flex-12 item-text" data-hover="@item.LotName">@item.LotName</div>
        <div class="rv-flex-equal item-text @(IsOutOfRange(item.TIS_Mean_X, rangeViewModel.SelectedRanges.FirstOrDefault(r => r.Field == "TIS Mean X")?.MinValue, rangeViewModel.SelectedRanges.FirstOrDefault(r => r.Field == "TIS Mean X")?.MaxValue) ? "out-of-range-background" : "")" data-hover="@item.TIS_Mean_X">@item.TIS_Mean_X.ToString(Constants.LotItemComponent.ToAfterDotDoubleFormat)</div>
        <div class="rv-flex-equal item-text @(IsOutOfRange(item.TIS_Mean_Y, rangeViewModel.SelectedRanges.FirstOrDefault(r => r.Field == "TIS Mean Y")?.MinValue, rangeViewModel.SelectedRanges.FirstOrDefault(r => r.Field == "TIS Mean Y")?.MaxValue) ? "out-of-range-background" : "")" data-hover="@item.TIS_Mean_Y">@item.TIS_Mean_Y.ToString(Constants.LotItemComponent.ToAfterDotDoubleFormat)</div>
        <div class="rv-flex-equal item-text @(IsOutOfRange(item.TIS_3Sigma_X, rangeViewModel.SelectedRanges.FirstOrDefault(r => r.Field == "TIS 3σ X")?.MinValue, rangeViewModel.SelectedRanges.FirstOrDefault(r => r.Field == "TIS 3σ X")?.MaxValue) ? "out-of-range-background" : "")" data-hover="@item.TIS_3Sigma_X">@item.TIS_3Sigma_X.ToString(Constants.LotItemComponent.ToAfterDotDoubleFormat)</div>
        <div class="rv-flex-equal item-text @(IsOutOfRange(item.TIS_3Sigma_Y, rangeViewModel.SelectedRanges.FirstOrDefault(r => r.Field == "TIS 3σ Y")?.MinValue, rangeViewModel.SelectedRanges.FirstOrDefault(r => r.Field == "TIS 3σ Y")?.MaxValue) ? "out-of-range-background" : "")" data-hover="@item.TIS_3Sigma_Y">@item.TIS_3Sigma_Y.ToString(Constants.LotItemComponent.ToAfterDotDoubleFormat)</div>
        <div class="rv-flex-equal item-text @(IsOutOfRange(item.Precision_X, rangeViewModel.SelectedRanges.FirstOrDefault(r => r.Field == "Prec X")?.MinValue, rangeViewModel.SelectedRanges.FirstOrDefault(r => r.Field == "Prec X")?.MaxValue) ? "out-of-range-background" : "")" data-hover="@item.Precision_X">@item.Precision_X.ToString(Constants.LotItemComponent.ToAfterDotDoubleFormat)</div>
        <div class="rv-flex-equal item-text @(IsOutOfRange(item.Precision_Y, rangeViewModel.SelectedRanges.FirstOrDefault(r => r.Field == "Prec Y")?.MinValue, rangeViewModel.SelectedRanges.FirstOrDefault(r => r.Field == "Prec Y")?.MaxValue) ? "out-of-range-background" : "")" data-hover="@item.Precision_Y">@item.Precision_Y.ToString(Constants.LotItemComponent.ToAfterDotDoubleFormat)</div>
        <div class="rv-flex-equal item-text @(IsOutOfRange(item.TMU_X, rangeViewModel.SelectedRanges.FirstOrDefault(r => r.Field == "TMU X")?.MinValue, rangeViewModel.SelectedRanges.FirstOrDefault(r => r.Field == "TMU X")?.MaxValue) ? "out-of-range-background" : "")" data-hover="@item.TMU_X">@item.TMU_X.ToString(Constants.LotItemComponent.ToAfterDotDoubleFormat)</div>
        <div class="rv-flex-equal item-text @(IsOutOfRange(item.TMU_Y, rangeViewModel.SelectedRanges.FirstOrDefault(r => r.Field == "TMU Y")?.MinValue, rangeViewModel.SelectedRanges.FirstOrDefault(r => r.Field == "TMU Y")?.MaxValue) ? "out-of-range-background" : "")" data-hover="@item.TMU_Y">@item.TMU_Y.ToString(Constants.LotItemComponent.ToAfterDotDoubleFormat)</div>
        <div class="rv-flex-equal item-text @(IsOutOfRange(item.TMU_Total, rangeViewModel.SelectedRanges.FirstOrDefault(r => r.Field == "TMU Total")?.MinValue, rangeViewModel.SelectedRanges.FirstOrDefault(r => r.Field == "TMU Total")?.MaxValue) ? "out-of-range-background" : "")" data-hover="@item.TMU_Total">@item.TMU_Total.ToString(Constants.LotItemComponent.ToAfterDotDoubleFormat)</div>
    </div>
</div>
